Channels and go routines are structures used for concurrent programming. 

A routine takes every line of code and executes it within a program. 

The go routine waits for the http Get command, and can do nothing else. This is a blocking call. 


The "go" keyword creates a new routine to run within the checkLink function. This can be done for any function call. 

The Scheduler runs one routine until it finishes or makes a blocking call, like an HTTP request. 

By default GO tries to use one core. 


Concurrency - We can have multiple threads executing code. If one thread blocks, another one is picked up and worked on:

One Core
<>
Pick one Go Routine!
<>
Go Routine <> Go Routine <> Go Rountine

Parallelism - Multiple threads executed at the exact same time. Requires multiple CPUs.

One Core | One Core
<>
Pick one Go Routine! | Pick one Go Routine!
<>
Go Routine <> Go Routine <> Go Rountine | Go Routine <> Go Routine <> Go Rountine


When running a program a Main Routine is created first. 

channel <- 5 Send the value '5' into this channel

myNumber <- channel Wait for a value to be sent into the channel. When we get one assign the value to 'myNumber'.

fmt.Println(<- channel) Wait for a value to be sent into the channel. When we get one, log it out immediately. 


Recieving messages from a channel is a blocking ling of code.

